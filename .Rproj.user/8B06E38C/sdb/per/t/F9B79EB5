{
    "collab_server" : "",
    "contents" : "#' Retrieve specific taxon information from ITIS based on scientific name query\n#'\n#' @param scientific_names string of scientific names with which to query ITIS\n#'\n#' @return tibble containing the queried scientific name, the valid ITIS scientific\n#'  name if the taxon is of 'Species' rank, the ITIS common name (if present), and\n#'  the ITIS taxon rank of the queried scientific name\n\n#' @examples\n#' \\dontrun{\n#' sn <- c(\"Thryothorus ludovicianus\", \"Cardinalis cardinalis\", \"Bidens alba\",\n#'         \"Pachydiplax longipennis\", \"Cladonia evansii\", \"Ischnura hastata\",\n#'         \"Smilax bona-nox\", \"Plantae\", \"Malvaviscus\", \"Anaxyrus\", \"Gulo gulo\")\n#' get_itis(sn)\n#' }\n\nget_itis <- function(scientific_names) {\n\n  scientific_names <- unique(scientific_names)\n\n  # Have to split lengthy requests so API can handle it\n  if (length(scientific_names) > 100) {\n    group_sn <- cut(seq_along(scientific_names), ceiling(length(scientific_names)/100), labels = FALSE)\n  } else group_sn <- rep(1, length(scientific_names))\n\n  itis <- lapply(unique(group_sn), function(i) {\n    tmp_sn <- scientific_names[which(group_sn == i)]\n    sci_query <- paste0('nameWOInd:(', paste(shQuote(tmp_sn), collapse = \" \"), ')')\n    invisible(solrium::solr_connect(\"http://services.itis.gov/\", verbose = FALSE))\n    itis <- solrium::solr_search(q = sci_query,\n                                 fl = c('tsn', 'nameWOInd', 'usage', 'rank', 'acceptedTSN',\n                                        'vernacular', 'hierarchySoFarWRanks'),\n                                 rows = length(tmp_sn) + 20) %>% # allow room for multiple returned matches\n      group_by(nameWOInd) %>%\n      # If multiple matches, preferentially keep valid/accepted, if available, or first record\n      slice(max(which(usage %in% c(\"accepted\", \"valid\")), 1)) %>%\n      ungroup()\n  })\n  itis <- bind_rows(itis)\n\n  # Save unmatched scientific names to add in later\n  unmatched <- scientific_names[which(!(scientific_names %in% itis$nameWOInd))]\n\n  # Add *missing* vernacular if not present..\n  if (!(\"vernacular\" %in% colnames(itis))) itis$vernacular <- NA_character_\n\n  # Simplify ITIS data.frame\n  itis <- mutate(itis,\n                 # Accepted scientific name\n                 valid_sci_name = retrieve_sci_name(hierarchySoFarWRanks),\n                 # Return most common common name in ITIS...and capitalize it\n                 itis_com_name = Cap(get_vernac(vernacular)),\n                 # Get rank if no longer species after correcting TSN\n                 itis_taxon_rank = retrieve_rank(hierarchySoFarWRanks)) %>%\n    select(sci_name = nameWOInd, valid_sci_name, itis_com_name, itis_taxon_rank = rank)\n\n  # Retrieve common names of changed scientific names, if missing...\n  needs_com_name <- itis %>%\n    filter(!identical(sci_name, valid_sci_name),\n           is.na(itis_com_name)) %>%\n    pull(valid_sci_name)\n\n  # Again splitting, if necessary, to keep API happy\n  if (length(needs_com_name) > 100) {\n    group_cn <- cut(seq_along(needs_com_name), ceiling(length(needs_com_name)/100), labels = FALSE)\n  } else group_cn <- rep(1, length(needs_com_name))\n\n  fix_cn <- lapply(unique(group_cn), function(i) {\n    tmp_cn <- needs_com_name[which(group_cn == i)]\n    sci_query <- paste0('nameWOInd:(', paste(shQuote(tmp_cn), collapse = \" \"), ')')\n    invisible(solrium::solr_connect(\"http://services.itis.gov/\", verbose = FALSE))\n    itis <- solrium::solr_search(q = sci_query,\n                                 fl = c('nameWOInd', 'vernacular'),\n                                 rows = length(tmp_cn) + 20) %>% # allow room for multiple returned matches\n      group_by(nameWOInd) %>%\n      slice(1) %>% ungroup() %>%\n      mutate(itis_com_name = Cap(get_vernac(vernacular))) %>%\n      select(valid_sci_name = nameWOInd, itis_com_name)\n  })\n  fix_cn <- bind_rows(fix_cn)\n  itis$itis_com_name[match(fix_cn$valid_sci_name, itis$valid_sci_name)] <- fix_cn$itis_com_name\n\n  # If necessary, add in unmatched records\n  if (length(unmatched) > 0)\n    itis <- bind_rows(itis, data.frame(sci_name = unmatched,\n                                       stringsAsFactors = FALSE))\n\n  itis\n\n}\n",
    "created" : 1500049189779.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3432053899",
    "id" : "F9B79EB5",
    "lastKnownWriteTime" : 1500053173,
    "last_content_update" : 1500053173568,
    "path" : "~/FWS_Projects/R_packages/itistools/R/get_itis.R",
    "project_path" : "R/get_itis.R",
    "properties" : {
        "tempName" : "Untitled5"
    },
    "relative_order" : 5,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}